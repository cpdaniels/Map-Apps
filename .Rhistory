value=geography(object)
for (j in geocols){
for (i in 1:dim(geography(object))[1]){
line.input=readline(prompt=paste("Change ", value[i,j]," to: \n", sep=""))
if (line.input=="") {break} else {value[i,j]=line.input}
}
}
}
else if (what=="acs.colnames"){
value=acs.colnames(object)
for (i in 1:length(acs.colnames(object))){
line.input=readline(prompt=paste("Change ", value[i]," to: \n", sep=""))
if (line.input=="") {break} else {value[i]=line.input}
}
} else if (what=="acs.units"){
value=acs.units(object)
input=rep("", length(value))
print("Type [c]ount, [d]ollars, [p]roportion, [r]atio, or [o]ther.")
for (i in 1:length(value)){
line.input=readline(prompt=paste(acs.colnames(object)[i], " is currently in these units: ", value[i],".  Change to what units?: (c,d,p,r,o)\n", sep=""))
if (line.input=="") {break} else {input[i]=line.input}
}
for (i in .acs.unit.levels){
value[input==substr(start=1, stop=1,i)]=i}
} else{
value=NA
warning(paste("prompt can only prompt for \"geography\", \"acs.units\", or \"acs.colnames\", not \""
, what, "\"", sep=""))}
value
}
setMethod("plot",
signature(x = "acs"),
function (x, conf.level=.95, err.col="red", err.lwd=1,
err.pch="-", err.cex=2, err.lty=2, x.res=300, labels="auto",
by="geography", true.min=T, ...)
{
# internal plot function to plot individual x-y plots with conf
# intervals, assume that either i or j or length 1
plot.xy.acs=function(x, object, conf.int.upper, conf.int.lower, estimates, labels, xlab, ylab, ...){
if(missing(xlab)) xlab=""
if(missing(ylab)) ylab=""
plot(rep(x,2), c(conf.int.upper, conf.int.lower), type="n", xaxt="n", xlab=xlab, ylab=ylab,...)
axis(side=1, labels=labels, at=x, ...)
lines(x=matrix(c(x,x,rep(NA, length(x))), ncol=length(x), byrow=T), matrix(c(conf.int.lower, conf.int.upper, rep(NA, length(x))), ncol=length(x), byrow=T), col=err.col, lwd=err.lwd, lty=err.lty)
points(x, conf.int.upper, pch=err.pch, cex=err.cex, col=err.col)
points(x, conf.int.lower, pch=err.pch, cex=err.cex, col=err.col)
points(x, estimates,...)
}
acs.density.plot=function(x, type="l", xlim,
xlab=acs.colnames(x), ylab="Density Distribution",
conf.level, col="black", err.col, err.lwd, err.lty,
x.res, ...){
est=estimate(x)
err=standard.error(x)
if (missing(xlim)) xlim=c(est-(4*err), est+(4*err))
x.vals=seq(from=xlim[1], to=xlim[2], by=(xlim[2]-xlim[1])/x.res)
plot(x.vals, dnorm(x.vals, mean=est, sd=err), type=type,
xlab=xlab, ylab=ylab, col=col,...)
if (conf.level) {abline(v=qnorm(mean=est, sd=err, p=c(((1-conf.level)/2), (1-((1-conf.level)/2)))), col=err.col, lwd=err.lwd, lty=err.lty)}
}
i=dim(x)[1]
j=dim(x)[2]
if (length(x)==1) {
acs.density.plot(x, conf.level=conf.level, err.col=err.col,
err.lwd=err.lwd, err.lty=err.lty, x.res=x.res, ...)
} else if (i == 1 | j == 1){
con=confint(x, level=conf.level)
conf.int.upper=NA
conf.int.lower=NA
estimates=NA
if (i == 1) {                               # one row
if (identical(labels, "auto")) labels=acs.colnames(x)
for (k in 1:j){
conf.int.upper[k]=as.numeric(con[[k]][2])
if (true.min==T) {
conf.int.lower[k]=as.numeric(con[[k]][1])
} else {if (true.min==F) {true.min=0}
conf.int.lower[k]=max(true.min, as.numeric(con[[k]][1]))}
estimates[k]=estimate(x)[1,k]
}}
else        {
if (identical(labels, "auto")) labels=geography(x)[[1]]
for (k in 1:i){                       # one column
conf.int.upper[k]=as.numeric(con[[1]][k,2])
if (true.min==T) {
conf.int.lower[k]=con[[1]][k,1]
} else {if (true.min==F) {true.min=0}
conf.int.lower[k]=max(true.min, con[[1]][k,1])}
estimates[k]=estimate(x)[k,1]
}}
plot.xy.acs(x=1:max(i,j), object=x, conf.int.upper=conf.int.upper, conf.int.lower=conf.int.lower, estimates=estimates, labels=labels,...)
} else {
if (by=="geography"){
par(mfrow=c(i, 1))
for (k in 1:i){
plot(x[k,], sub=geography(x)[k,1], conf.level=conf.level, err.col=err.col, err.lwd=err.lwd, err.pch=err.pch, err.cex=err.cex, err.lty=err.lty, labels=labels,...)
}
} else if (by=="acs.colnames") {
par(mfrow=c(1,j))
for (k in 1:j){
plot(x[,k], sub=acs.colnames(x)[k], conf.level=conf.level,
err.col=err.col, err.lwd=err.lwd, err.pch=err.pch,
err.cex=err.cex, err.lty=err.lty, labels=labels,...)
}
}
}
}
)
acs.fetch(
endyear=2016, span = 5,
geography=geo.make(zip.code='94709'),
table.number="DP02",
dataset="acs_dp")
acs.fetch(
endyear=2016, span = 5,
geography=geo.make(zip.code='94709'),
variable= "DP03_0062PE",
dataset="acs_dp")
acs.fetch(
endyear=2016, span = 5,
geography=geo.make(zip.code='94709'),
variable= "DP03_0062PE",
dataset="acs_dp")
acs.fetch(
endyear=2016, span = 5,
geography=geo.make(zip.code='94709'),
variable= "DP03_0062P",
dataset="acs_dp")
acs.fetch(
endyear=2016, span = 5,
geography=geo.make(zip.code='94709'),
variable= "DP03_0062",
dataset="acs_dp")
install.packages('acs')
install.packages("acs")
install.packages("acs")
geos <- geo.make(state="Maryland", county = "Baltimore city", tract = "*", block.group ="*")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001' , dataset = "acs")
api.key.install(key="db92694678e382aa69cfc6873d146a86ad7903fe")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001' , dataset = "acs")
geos <- geo.make(state="Maryland", county = "Baltimore city", tract = "*", block.group ="*")
library(acs)
geos <- geo.make(state="Maryland", county = "Baltimore city", tract = "*", block.group ="*")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001' , dataset = "acs")
remove.packages('acs')
install.packages('acs')
install.packages("acs")
library(acs)
api.key.install(key="db92694678e382aa69cfc6873d146a86ad7903fe")
geos <- geo.make(state="Maryland", county = "Baltimore city", tract = "*", block.group ="*")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001' , dataset = "acs")
#load packages
library(ggmap)
library(stringr)
library(lubridate)
library(tidyr)
library(acs)
api.key.install(key="db92694678e382aa69cfc6873d146a86ad7903fe")
geos <- geo.make(state="Maryland", county = "Baltimore city", tract = "*", block.group ="*")
thing <- acs.fetch(2016, span = 5, geos, variable = variables,  dataset = "acs_dp",
key ="db92694678e382aa69cfc6873d146a86ad7903fe")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001',  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe")
library(censusapi)
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02001',  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe")
thing <- acs.fetch(2016, span = 5, geos, variable = 'B02008',  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe")
thing <- acs.fetch(2016, span = 5, geos, table.number = 'B02008',  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe")
View(thing)
thing <- as.data.frame(acs.fetch(2016, span = 5, geos, table.number = 'B02008',  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe"))
thing
thing.data <- data(thing)
View(thing)
View(thing)
geography(thing)
as.data.frame(geography(thing)['state']
])
as.data.frame(geography(thing))['state']
View(thing)
as.data.frame((geography(thing))[c('state','county','tract','blockgroup')], thing[estimate])
thing['estimate']
estimate(thing)
new.thing <- as.data.frame(estimate(thing))
View(new.thing)
thing <- (acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe"))
new.thing <- as.data.frame(estimate(thing))
View(new.thing)
thing <- (acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe"), col.names = 'auto')
thing <- (acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe", col.names = 'auto')
thing <- acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
key ="db92694678e382aa69cfc6873d146a86ad7903fe", col.names = 'auto')
thing <- acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
col.names = 'auto')
new.thing <- as.data.frame(c(estimate(thing), acs.colnames(thing))
)
View(new.thing)
new.thing <- as.data.frame(estimate(thing), acs.colnames(thing))
View(new.thing)
new.thing <- as.data.frame(estimate(thing))
names(new.thing) <- acs.colnames(thing)
new.thing <- as.data.frame(estimate(thing))
names(new.thing) <- acs.colnames(thing)
View(new.thing)
thing <- acs.fetch(2016, span = 5, geos, table.number = c('B02008', 'B02001'),  dataset = "acs",
col.names = 'pretty')
new.thing <- as.data.frame(estimate(thing))
View(new.thing)
acs.lookup(2016, span=5, dataset = 'acs', table.number = 'B02001')
library(acs)
racevars <- acs.lookup(2016, span =5, dataset = 'acs', table.numer ='B02001' )
racevars <- acs.lookup(2016, span =5, dataset = 'acs', table.number ='B02001' )
View(racevars)
racevars <- as.data.frame(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B02001'))
racevars <- acs.lookup(2016, span =5, dataset = 'acs', table.number ='B02001')
View(racevars)
racevars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B02001'))
View(racevars)
race.codes <- racevars$variable.code[1:3]
HISPvars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B03003'))
View(HISPvars)
hisp.codes <- HISPvars$variable.code[c(1,3)]
hisp.names <- c('Total', "Hispanic")
under18.vars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B01001'))
View(under18.vars)
POV.vars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B17017'))
View(POV.vars)
pov.codes <- POV.vars$variable.code[1:2]
pov.names <- c('Total', "Under Pov")
INC.vars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B19013'))
View(INC.vars)
inc.codes <- INC.vars$variable.code[1]
inc.names <- c('Median Income'")
inc.names <- c('Median Income')
)
)
JALSDFJ
02U3R THINAG
))))
]
}{}
ED.vars <- results(acs.lookup(2016, span =5, dataset = 'acs', table.number ='B150023'))
?
aoisljd
()
#load packages
library(ggmap)
library(stringr)
library(lubridate)
library(tidyr)
library(tidycensus)
library(censusr)
directory <- "~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Sep 2017 Week 1"
filename <- "Victim.csv"
data <- read.csv(paste(directory,filename, sep = "/"))
####Define everything for each category
assault <- c('COMMON ASSAULT',
'ASSAULT BY THREAT')
property <- c('LARCENY',
'BURGLARY',
'LARCENY FROM AUTO',
'AUTO THEFT',
'ARSON')
sexual.assualt <- c('RAPE')
violent.or.robbery <- c('AGG. ASSAULT',
'ROBBERY - STREET',
'ROBBERY - COMMERCIAL',
'ROBBERY - CARJACKING',
'ROBBERY - RESIDENCE')
shooting.or.murder <- c('SHOOTING',
'HOMICIDE')
data$CrimeType <- NA
for (i in 1:nrow(data)){
if (data$Description[i] %in% assault){
data$CrimeType[i] <- 'ASSAULT'
}
if (data$Description[i] %in% property){
data$CrimeType[i] <- 'PROPERTY'
}
if (data$Description[i] %in% sexual.assualt){
data$CrimeType[i] <- 'SEXUAL ASSAULT'
}
if (data$Description[i] %in% violent.or.robbery){
data$CrimeType[i] <- 'VIOLENT OR ROBBERY'}
if (data$Description[i] %in% shooting.or.murder){
data$CrimeType[i] <- 'SHOOTING OR MURDER'}
}
for (i in 1:nrow(data)){
if(is.na(data$Latitude[i])==T){
latlong <- geocode(paste(data$incidentLocation[i],",Baltimore, MD", sep=""),
output = "latlona", source = "dsk")
data$Latitude[i] <- latlong[[2]]
data$Longitude[i] <-latlong[[1]]
}
}
#create placeholder column
data$GeoID <- NA
#use census API to get geoid
for (i in 1:nrow(data)){
if (!is.na(data$Latitude[i])){
data$GeoID[i] <- as.character(call_geolocator_latlon(data$Latitude[i],
data$Longitude[i]))
}
else{
data$GeoID[i] <- NA
}
}
#############format time################
data$CrimeTime <- as.character(data$CrimeTime)
for (i in 1:nrow(data)){
if (str_length(data$CrimeTime[i]) == 3){
data$CrimeTime[i] <- paste(formatC(substring(data$CrimeTime[i],1,1), width=2, flag="0"),
substring(data$CrimeTime[i],3,4) , "00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 2){
data$CrimeTime[i] <- paste("00", substring(data$CrimeTime[i],1,2),
substring(data$CrimeTime[i],1,2) , "00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 1){
data$CrimeTime[i] <- paste("00", formatC(substring(data$CrimeTime[i],1,1), width=2, flag="0"),
"00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 4){
data$CrimeTime[i] <- paste(substring(data$CrimeTime[i],1,2),
substring(data$CrimeTime[i],3,4) , "00",sep=":")
}
}
data$CrimeDate <- mdy(data$CrimeDate)
data$CrimeTime <- hms(data$CrimeTime)
data$Day <- NA
data$Hour <- NA
#add hour ticker
data$Hour <- hour(data$callTime) + 1
data <- data[, c('CrimeType', 'GeoID', 'CrimeDate', 'Hour')]
names(data) <- c('Type', "GeoID",'Date','Hour')
write.csv(data, paste(directory, paste("Recoded", filename, sep = "_"), sep = "/"))
##################FORMATTING DATAFRAME#############################
data <- data[which(!is.na(data$GeoID)),]
geos <- unique(data$GeoID)
codes <- as.character(unique(data$Type))
dates <- unique(data$Date)
hours <- c(0:23)
hours <- hms(paste(formatC(hours, width=2, flag="0"),
":00:00", sep = ""))
newMat <- as.data.frame(matrix(0, length(dates)*24*length(geos), length(codes)+3))
names(newMat) <- c('GeoID', 'Date', 'Time', as.character(codes))
newMat$Date <- rep(dates, length(geos)*24)
newMat$GeoID <- rep(as.character(geos), length(dates)*24)
newMat <- newMat[order(newMat$GeoID, newMat$Date),]
newMat$Time <- rep(hours, length(geos)*length(dates))
###########ADD CENSUS INFO##########################
###Read in census info
censusDat <- read.csv("~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Baltimore.Census.BG.csv")
#create MergeIDs
newMat$MergeID <- substring(newMat$GeoID, 6,12)
censusDat$MergeID <- paste(formatC(censusDat$tract, width=6, flag="0"), censusDat$blockgroup
, sep = "")
censusDat <- censusDat[,c("MergeID","PerWhite", "PerBlack","PerHisp","PerPov","PerColl","Median.Income")]
###Merge on Merge IDS
newMat <- merge(newMat, censusDat, by.y = "MergeID")
for (n in 1:nrow(data)){
crime <- as.character(data[n, "Type"])
d <- as.character(data[n, "Date"])
t <- as.character(data[n, 'Hour'])
g <- data[n, "GeoID"]
newMat[which(newMat$GeoID == g & newMat$Date == d & newMat$Time == t),
crime] <- newMat[which(newMat$GeoID == g & newMat$Date == d & newMat$Time == t),crime] + 1
}
write.csv(newMat, paste(directory, paste("Formatted", filename, sep = "_"), sep = "/"))
#add hour ticker
data$Hour <- hour(data$CrimeTime) + 1
data <- data[, c('CrimeType', 'GeoID', 'CrimeDate', 'Hour')]
names(data) <- c('Type', "GeoID",'Date','Hour')
data$CrimeDate <- mdy(data$CrimeDate)
data$CrimeTime <- hms(data$CrimeTime)
View(data)
#load packages
library(ggmap)
library(stringr)
library(lubridate)
library(tidyr)
library(tidycensus)
library(censusr)
directory <- "~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Sep 2017 Week 1"
filename <- "Victim.csv"
data <- read.csv(paste(directory,filename, sep = "/"))
####Define everything for each category
assault <- c('COMMON ASSAULT',
'ASSAULT BY THREAT')
property <- c('LARCENY',
'BURGLARY',
'LARCENY FROM AUTO',
'AUTO THEFT',
'ARSON')
sexual.assualt <- c('RAPE')
violent.or.robbery <- c('AGG. ASSAULT',
'ROBBERY - STREET',
'ROBBERY - COMMERCIAL',
'ROBBERY - CARJACKING',
'ROBBERY - RESIDENCE')
shooting.or.murder <- c('SHOOTING',
'HOMICIDE')
data$CrimeType <- NA
for (i in 1:nrow(data)){
if (data$Description[i] %in% assault){
data$CrimeType[i] <- 'ASSAULT'
}
if (data$Description[i] %in% property){
data$CrimeType[i] <- 'PROPERTY'
}
if (data$Description[i] %in% sexual.assualt){
data$CrimeType[i] <- 'SEXUAL ASSAULT'
}
if (data$Description[i] %in% violent.or.robbery){
data$CrimeType[i] <- 'VIOLENT OR ROBBERY'}
if (data$Description[i] %in% shooting.or.murder){
data$CrimeType[i] <- 'SHOOTING OR MURDER'}
}
for (i in 1:nrow(data)){
if(is.na(data$Latitude[i])==T){
latlong <- geocode(paste(data$incidentLocation[i],",Baltimore, MD", sep=""),
output = "latlona", source = "dsk")
data$Latitude[i] <- latlong[[2]]
data$Longitude[i] <-latlong[[1]]
}
}
#create placeholder column
data$GeoID <- NA
#use census API to get geoid
for (i in 1:nrow(data)){
if (!is.na(data$Latitude[i])){
data$GeoID[i] <- as.character(call_geolocator_latlon(data$Latitude[i],
data$Longitude[i]))
}
else{
data$GeoID[i] <- NA
}
}
#############format time################
data$CrimeTime <- as.character(data$CrimeTime)
for (i in 1:nrow(data)){
if (str_length(data$CrimeTime[i]) == 3){
data$CrimeTime[i] <- paste(formatC(substring(data$CrimeTime[i],1,1), width=2, flag="0"),
substring(data$CrimeTime[i],3,4) , "00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 2){
data$CrimeTime[i] <- paste("00", substring(data$CrimeTime[i],1,2),
substring(data$CrimeTime[i],1,2) , "00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 1){
data$CrimeTime[i] <- paste("00", formatC(substring(data$CrimeTime[i],1,1), width=2, flag="0"),
"00",sep=":")
}
if (str_length(data$CrimeTime[i]) == 4){
data$CrimeTime[i] <- paste(substring(data$CrimeTime[i],1,2),
substring(data$CrimeTime[i],3,4) , "00",sep=":")
}
}
data$CrimeDate <- mdy(data$CrimeDate)
data$CrimeTime <- hms(data$CrimeTime)
data$Day <- NA
data$Hour <- NA
#add hour ticker
data$Hour <- hour(data$CrimeTime) + 1
working_dir <- c("~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Map Apps")
setwd(working_dir)
#set your data directory
data_dir <- c('~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Data/')
#read in data
library('lubridate')
df = read.csv(paste(data_dir, "911_3mo.csv", sep = ""), stringsAsFactors = F)
df = read.csv(paste(data_dir, "911_3mo.csv", sep = ""), stringsAsFactors = F)
dates <- unique(df$Date)
geoIDs <- unique(df$MergeID)
newmat <- as.data.frame(matrix(0, nrow= length(dates) * length(geoIDs), ncol = ncol(df)))
names(newmat) <- names(df)
newmat$MergeID <- rep(geoIDs, length(dates))
newmat$Date <- rep(dates, length(geoIDs))
View(newmat)
for (i in 1:nrow(newmat)){
newmat$MISCELLANEOUS.OR.UNKNOWN[i] <- sum(df$MISCELLANEOUS.OR.UNKNOWN[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$ANONYMOUS[i] <- sum(df$ANONYMOUS[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$PERSON.PEOPLE.CAUSING.DISORDER.OR.ALTERCATION.OR.SUSPICION[i] <-
sum(df$PERSON.PEOPLE.CAUSING.DISORDER.OR.ALTERCATION.OR.SUSPICION[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$PERSONAL.HELP[i] <- sum(df$PERSONAL.HELP[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$EMERGENCY[i] <- sum(df$EMERGENCY[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$VICTIMIZATION..CALLER.[i] <- sum(df$VICTIMIZATION..CALLER.[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$DISORDER.IN.PUBLIC.SPACE[i] <- sum(df$DISORDER.IN.PUBLIC.SPACE[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
newmat$CRIME[i] <- sum(df$CRIME[
which(df$Date == newmat$Date[i] & df$MergeID == newmat$MergeID[i])])
}
library('lubridate')
##########Read in data
#set working directory
working_dir <- c("~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Map Apps")
setwd(working_dir)
#set your data directory
data_dir <- c('~/Dropbox/SCHOOL/Fall 2018/Crime Time & Space Proj/Data/')
#read in data
df = read.csv(paste(data_dir, "911_3mo.csv", sep = ""), stringsAsFactors = F)
